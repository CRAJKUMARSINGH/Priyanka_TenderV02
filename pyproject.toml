[project]
name = "tenderlatexpro-enhanced"
version = "3.0.0"
description = "Enhanced Tender Processing System with Advanced Analytics, LaTeX Generation & Modern UI - An Initiative by Mrs. Premlata Jain, PWD Udaipur"
authors = [
    {name = "Mrs. Premlata Jain", email = "premlata.jain@pwd.gov.in"},
    {name = "RAJKUMAR SINGH CHAUHAN", email = "crajkumarsingh@hotmail.com"},
    {name = "TenderLatexPro Team", email = "support@tenderlatexpro.com"}
]
readme = "README_RAJKUMAR.md"
requires-python = ">=3.9"
keywords = ["tender", "latex", "pdf", "streamlit", "government", "procurement", "analytics", "optimization"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Government",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Visualization",
    "Framework :: Streamlit"
]
dependencies = [
    # Core Streamlit and Web Framework
    "streamlit>=1.32.0",
    "streamlit-option-menu>=0.3.6",
    
    # Data Processing and Analytics
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "plotly>=5.18.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "scipy>=1.12.0",
    
    # File Processing - Enhanced Excel Support
    "openpyxl>=3.1.5",
    "xlrd>=2.0.1",
    "xlsxwriter>=3.1.9",
    "PyPDF2>=3.0.1",
    "pymupdf>=1.26.3",
    "python-docx>=1.1.0",
    
    # PDF and Document Generation
    "reportlab>=4.1.0",
    "fpdf2>=2.7.6",
    "Pillow>=10.2.0",
    
    # Database and Storage
    "sqlalchemy>=2.0.25",
    
    # Validation and Data Models
    "pydantic>=2.6.0",
    
    # Template Engine
    "jinja2>=3.1.3",
    
    # Performance and Monitoring
    "psutil>=7.0.0",
    "memory-profiler>=0.61.0",
    
    # Utilities and Helpers
    "typer>=0.9.0",
    "rich>=13.7.0",
    "python-dotenv>=1.0.1",
    "python-dateutil>=2.8.2",
    
    # Testing and Quality Assurance
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    
    # Logging
    "loguru>=0.7.0"
]

[project.optional-dependencies]
development = [
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipython>=8.20.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0"
]
deployment = [
    "gunicorn>=21.2.0",
    "uvicorn>=0.27.0",
    "docker>=7.0.0"
]
extended = [
    "scikit-learn>=1.4.0",
    "opencv-python>=4.9.0",
    "fastapi>=0.109.0",
    "celery>=5.3.0"
]

[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["tenderlatexpro*"]
exclude = ["tests*"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
